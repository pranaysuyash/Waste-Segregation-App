import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:googleapis/drive/v3.dart' as drive;
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'storage_service.dart';

class GoogleDriveService {
  final GoogleSignIn _googleSignIn = GoogleSignIn(
    scopes: [
      'email',
      'https://www.googleapis.com/auth/drive.file',
    ],
  );

  final StorageService _storageService;

  GoogleDriveService(this._storageService);

  // Sign in with Google
  Future<GoogleSignInAccount?> signIn() async {
    try {
      // TEMPORARY: Create a mock user for testing without actual Google Sign-In
      debugPrint('WARNING: Using mock Google Sign-In user for testing');
      
      // Save dummy user info to local storage
      await _storageService.saveUserInfo(
        userId: 'mock_user_id',
        email: 'mock_user@example.com',
        displayName: 'Test User',
      );
      
      // Return null to simulate successful mock sign-in
      // The app should proceed as if signed in
      return null;
      
      // COMMENTED OUT REAL GOOGLE SIGN-IN CODE
      /*
      final GoogleSignInAccount? account = await _googleSignIn.signIn();
      if (account != null) {
        // Save user info to local storage
        await _storageService.saveUserInfo(
          userId: account.id,
          email: account.email,
          displayName: account.displayName ?? account.email.split('@').first,
        );
      }
      return account;
      */
    } catch (e) {
      debugPrint('Error signing in with Google: $e');
      rethrow;
    }
  }

  // Sign out from Google
  Future<void> signOut() async {
    try {
      // TEMPORARY: Mock sign out
      await _storageService.clearUserInfo();
      
      // COMMENTED OUT REAL SIGN OUT
      // await _googleSignIn.signOut();
      // await _storageService.clearUserInfo();
    } catch (e) {
      debugPrint('Error signing out from Google: $e');
      rethrow;
    }
  }

  // Check if user is signed in
  Future<bool> isSignedIn() async {
    // TEMPORARY: Always return true for testing
    return true;
    
    // COMMENTED OUT REAL SIGN IN CHECK
    // return await _googleSignIn.isSignedIn();
  }

  // Get authenticated HTTP client
  Future<http.Client> _getAuthenticatedHttpClient() async {
    // TEMPORARY: Create a dummy client that will fail gracefully
    // This is just for testing - in production you'd use the real code
    return _DummyAuthClient();
    
    /*
    final GoogleSignInAccount? account = await _googleSignIn.signInSilently();
    if (account == null) {
      throw Exception('User not signed in');
    }

    final GoogleSignInAuthentication auth = await account.authentication;
    final Map<String, String> authHeaders = {
      'Authorization': 'Bearer ${auth.accessToken}',
      'Content-Type': 'application/json',
    };

    return _AuthenticatedClient(http.Client(), authHeaders);
    */
  }

  // Upload data to Google Drive
  Future<String> uploadToDrive({
    required String fileName,
    required String mimeType,
    required String content,
    String? folderId,
  }) async {
    try {
      // TEMPORARY: Return a dummy ID for testing
      return 'mock_file_id_${DateTime.now().millisecondsSinceEpoch}';
      
      /*
      final client = await _getAuthenticatedHttpClient();
      final driveApi = drive.DriveApi(client);

      // Create a temporary file
      final tempDir = await getTemporaryDirectory();
      final tempFile = File('${tempDir.path}/$fileName');
      await tempFile.writeAsString(content);

      // Create drive file metadata
      final driveFile = drive.File()
        ..name = fileName
        ..mimeType = mimeType;

      if (folderId != null) {
        driveFile.parents = [folderId];
      }

      // Upload file to drive
      final uploadedFile = await driveApi.files.create(
        driveFile,
        uploadMedia: drive.Media(tempFile.openRead(), tempFile.lengthSync()),
      );

      // Delete temp file
      await tempFile.delete();

      return uploadedFile.id!;
      */
    } catch (e) {
      debugPrint('Error uploading to Drive: $e');
      rethrow;
    }
  }

  // All other methods would be similarly mocked for testing
  // Download file from Google Drive
  Future<String> downloadFromDrive(String fileId) async {
    // Return mock data
    return '{"mock":"data"}';
  }

  // Create a folder in Google Drive
  Future<String> createFolder(String folderName) async {
    // Return mock folder ID
    return 'mock_folder_id';
  }

  // Find file or folder in Google Drive
  Future<String?> findFileOrFolder(String name, {bool isFolder = false}) async {
    // Return mock ID
    return isFolder ? 'mock_folder_id' : 'mock_file_id';
  }

  // Backup user data to Google Drive
  Future<String> backupUserData() async {
    // Return mock backup ID
    return 'mock_backup_id';
  }

  // Restore user data from Google Drive
  Future<void> restoreUserData(String fileId) async {
    // Do nothing in mock
  }

  // List backup files in Google Drive
  Future<List<Map<String, String>>> listBackupFiles() async {
    // Return mock list
    return [
      {'id': 'mock_file_1', 'name': 'Mock Backup 1'},
      {'id': 'mock_file_2', 'name': 'Mock Backup 2'},
    ];
  }
}

// Mock HTTP Client for testing
class _DummyAuthClient extends http.BaseClient {
  @override
  Future<http.StreamedResponse> send(http.BaseRequest request) {
    throw Exception('This is a mock client for testing only');
  }
}

// Original Authenticated Client
class _AuthenticatedClient extends http.BaseClient {
  final http.Client _client;
  final Map<String, String> _headers;

  _AuthenticatedClient(this._client, this._headers);

  @override
  Future<http.StreamedResponse> send(http.BaseRequest request) {
    request.headers.addAll(_headers);
    return _client.send(request);
  }

  @override
  void close() {
    _client.close();
  }
}
