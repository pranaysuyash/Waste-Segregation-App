name: Release
on:
  push:
    tags: ['v*.*.*']

permissions:
  contents: write

jobs:
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'
        channel: 'stable'
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test --coverage --exclude-tags=golden
      
    - name: Build Android APK
      run: flutter build apk --release
      
    - name: Build Android App Bundle
      run: flutter build appbundle --release
      
    - name: Build Web
      run: flutter build web --release
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-builds
        path: |
          build/app/outputs/flutter-apk/app-release.apk
          build/app/outputs/bundle/release/app-release.aab
          build/web/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-builds
        path: ./release-artifacts
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Extract changelog for version
      id: changelog
      run: |
        # Extract the section for this version from CHANGELOG.md
        VERSION="${{ steps.version.outputs.VERSION }}"
        CHANGELOG_SECTION=$(awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "No changelog entry found for ${VERSION}")
        echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_SECTION" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: "Waste Segregation App ${{ steps.version.outputs.VERSION }}"
        body: |
          ## What's New in ${{ steps.version.outputs.VERSION }}
          
          ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
          
          ---
          
          ## Downloads
          
          - **Android APK**: For direct installation on Android devices
          - **Android App Bundle**: For Google Play Store distribution  
          - **Web Build**: For web deployment
          
          ## Installation Instructions
          
          ### Android APK
          1. Download the `app-release.apk` file
          2. Enable "Install from Unknown Sources" in Android settings
          3. Install the APK file
          
          ### Web Version
          Download and extract the web build, then serve the files using any web server.
          
          ## System Requirements
          - **Android**: API level 21+ (Android 5.0+)
          - **Web**: Modern browser with JavaScript enabled
          - **Camera**: Required for waste classification features
          
          ---
          
          *Built with Flutter 3.24.5 ‚Ä¢ Tested with comprehensive CI/CD pipeline*
        draft: false
        prerelease: false
        
    - name: Upload Android APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/build/app/outputs/flutter-apk/app-release.apk
        asset_name: waste-segregation-app-${{ steps.version.outputs.VERSION }}.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload Android App Bundle
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/build/app/outputs/bundle/release/app-release.aab
        asset_name: waste-segregation-app-${{ steps.version.outputs.VERSION }}.aab
        asset_content_type: application/octet-stream

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build, release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ github.ref }} created successfully!"
        echo "üöÄ Artifacts built and uploaded to GitHub Releases"
        
    - name: Notify failure  
      if: needs.release.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref }} failed!"
        echo "Check the workflow logs for details"
        exit 1