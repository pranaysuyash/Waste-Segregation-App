// Mocks generated by Mockito 5.4.4 from annotations
// in waste_segregation_app/test/screens/achievements_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:waste_segregation_app/models/educational_content.dart' as _i6;
import 'package:waste_segregation_app/models/gamification.dart' as _i2;
import 'package:waste_segregation_app/models/waste_classification.dart' as _i5;
import 'package:waste_segregation_app/services/gamification_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGamificationProfile_0 extends _i1.SmartFake
    implements _i2.GamificationProfile {
  _FakeGamificationProfile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreak_1 extends _i1.SmartFake implements _i2.Streak {
  _FakeStreak_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserPoints_2 extends _i1.SmartFake implements _i2.UserPoints {
  _FakeUserPoints_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GamificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGamificationService extends _i1.Mock
    implements _i3.GamificationService {
  MockGamificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initGamification() => (super.noSuchMethod(
        Invocation.method(
          #initGamification,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.GamificationProfile> getProfile(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProfile,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i4.Future<_i2.GamificationProfile>.value(
            _FakeGamificationProfile_0(
          this,
          Invocation.method(
            #getProfile,
            [],
            {#forceRefresh: forceRefresh},
          ),
        )),
      ) as _i4.Future<_i2.GamificationProfile>);

  @override
  _i4.Future<void> saveProfile(
          _i2.GamificationProfile? gamificationProfileToSave) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveProfile,
          [gamificationProfileToSave],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Streak> updateStreak() => (super.noSuchMethod(
        Invocation.method(
          #updateStreak,
          [],
        ),
        returnValue: _i4.Future<_i2.Streak>.value(_FakeStreak_1(
          this,
          Invocation.method(
            #updateStreak,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Streak>);

  @override
  _i4.Future<_i2.UserPoints> addPoints(
    String? action, {
    String? category,
    int? customPoints,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPoints,
          [action],
          {
            #category: category,
            #customPoints: customPoints,
          },
        ),
        returnValue: _i4.Future<_i2.UserPoints>.value(_FakeUserPoints_2(
          this,
          Invocation.method(
            #addPoints,
            [action],
            {
              #category: category,
              #customPoints: customPoints,
            },
          ),
        )),
      ) as _i4.Future<_i2.UserPoints>);

  @override
  _i4.Future<void> syncClassificationPoints() => (super.noSuchMethod(
        Invocation.method(
          #syncClassificationPoints,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncAchievementProgressFromClassifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #syncAchievementProgressFromClassifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Challenge>> processClassification(
          _i5.WasteClassification? classification) =>
      (super.noSuchMethod(
        Invocation.method(
          #processClassification,
          [classification],
        ),
        returnValue: _i4.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i4.Future<List<_i2.Challenge>>);

  @override
  _i4.Future<void> processEducationalContent(_i6.EducationalContent? content) =>
      (super.noSuchMethod(
        Invocation.method(
          #processEducationalContent,
          [content],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Achievement>> updateAchievementProgress(
    _i2.AchievementType? type,
    int? increment,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAchievementProgress,
          [
            type,
            increment,
          ],
        ),
        returnValue:
            _i4.Future<List<_i2.Achievement>>.value(<_i2.Achievement>[]),
      ) as _i4.Future<List<_i2.Achievement>>);

  @override
  _i4.Future<List<_i2.Challenge>> getActiveChallenges() => (super.noSuchMethod(
        Invocation.method(
          #getActiveChallenges,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i4.Future<List<_i2.Challenge>>);

  @override
  _i4.Future<List<_i2.Challenge>> updateChallengeProgress(
          _i5.WasteClassification? classification) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChallengeProgress,
          [classification],
        ),
        returnValue: _i4.Future<List<_i2.Challenge>>.value(<_i2.Challenge>[]),
      ) as _i4.Future<List<_i2.Challenge>>);

  @override
  _i4.Future<List<_i2.WeeklyStats>> getWeeklyStats() => (super.noSuchMethod(
        Invocation.method(
          #getWeeklyStats,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.WeeklyStats>>.value(<_i2.WeeklyStats>[]),
      ) as _i4.Future<List<_i2.WeeklyStats>>);

  @override
  List<_i2.Achievement> getDefaultAchievements() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultAchievements,
          [],
        ),
        returnValue: <_i2.Achievement>[],
      ) as List<_i2.Achievement>);

  @override
  _i4.Future<void> clearGamificationData() => (super.noSuchMethod(
        Invocation.method(
          #clearGamificationData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> getTotalLifetimePoints() => (super.noSuchMethod(
        Invocation.method(
          #getTotalLifetimePoints,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getArchivedPointsHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getArchivedPointsHistory,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> resetStreakToYesterday() => (super.noSuchMethod(
        Invocation.method(
          #resetStreakToYesterday,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.GamificationProfile> forceRefreshProfile() =>
      (super.noSuchMethod(
        Invocation.method(
          #forceRefreshProfile,
          [],
        ),
        returnValue: _i4.Future<_i2.GamificationProfile>.value(
            _FakeGamificationProfile_0(
          this,
          Invocation.method(
            #forceRefreshProfile,
            [],
          ),
        )),
      ) as _i4.Future<_i2.GamificationProfile>);

  @override
  _i4.Future<void> forceCompleteSyncAndRefresh() => (super.noSuchMethod(
        Invocation.method(
          #forceCompleteSyncAndRefresh,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncGamificationData() => (super.noSuchMethod(
        Invocation.method(
          #syncGamificationData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncWeeklyStatsWithClassifications() => (super.noSuchMethod(
        Invocation.method(
          #syncWeeklyStatsWithClassifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
