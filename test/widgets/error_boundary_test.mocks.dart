// Mocks generated by Mockito 5.4.4 from annotations
// in waste_segregation_app/test/widgets/error_boundary_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:waste_segregation_app/services/analytics_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i2.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFirestoreConnected => (super.noSuchMethod(
        Invocation.getter(#isFirestoreConnected),
        returnValue: false,
      ) as bool);

  @override
  int get pendingEventsCount => (super.noSuchMethod(
        Invocation.getter(#pendingEventsCount),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void clearAnalyticsData() => super.noSuchMethod(
        Invocation.method(
          #clearAnalyticsData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackSessionEndLegacy() => super.noSuchMethod(
        Invocation.method(
          #trackSessionEndLegacy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> trackEvent({
    required String? eventType,
    required String? eventName,
    Map<String, dynamic>? parameters = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackEvent,
          [],
          {
            #eventType: eventType,
            #eventName: eventName,
            #parameters: parameters,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackScreenView(
    String? screenName, {
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackScreenView,
          [screenName],
          {#parameters: parameters},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackUserAction(
    String? actionName, {
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackUserAction,
          [actionName],
          {#parameters: parameters},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackClassification({
    required String? classificationId,
    required String? category,
    required bool? isRecyclable,
    required double? confidence,
    required String? method,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackClassification,
          [],
          {
            #classificationId: classificationId,
            #category: category,
            #isRecyclable: isRecyclable,
            #confidence: confidence,
            #method: method,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackSocialInteraction({
    required String? interactionType,
    required String? targetId,
    String? familyId,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackSocialInteraction,
          [],
          {
            #interactionType: interactionType,
            #targetId: targetId,
            #familyId: familyId,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackAchievement({
    required String? achievementId,
    required String? achievementType,
    required int? pointsAwarded,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackAchievement,
          [],
          {
            #achievementId: achievementId,
            #achievementType: achievementType,
            #pointsAwarded: pointsAwarded,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackError({
    required String? errorType,
    required String? errorMessage,
    String? stackTrace,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackError,
          [],
          {
            #errorType: errorType,
            #errorMessage: errorMessage,
            #stackTrace: stackTrace,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackSessionStart() => (super.noSuchMethod(
        Invocation.method(
          #trackSessionStart,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackSessionEnd() => (super.noSuchMethod(
        Invocation.method(
          #trackSessionEnd,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackPageView(
    String? screenName, {
    String? previousScreen,
    String? navigationMethod,
    int? timeOnPreviousScreen,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackPageView,
          [screenName],
          {
            #previousScreen: previousScreen,
            #navigationMethod: navigationMethod,
            #timeOnPreviousScreen: timeOnPreviousScreen,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackClick({
    required String? elementId,
    required String? screenName,
    required String? elementType,
    String? userIntent,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackClick,
          [],
          {
            #elementId: elementId,
            #screenName: screenName,
            #elementType: elementType,
            #userIntent: userIntent,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackRageClick({
    required String? elementId,
    required String? screenName,
    required int? tapCount,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackRageClick,
          [],
          {
            #elementId: elementId,
            #screenName: screenName,
            #tapCount: tapCount,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackScrollDepth({
    required int? depthPercent,
    required String? screenName,
    String? contentType,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackScrollDepth,
          [],
          {
            #depthPercent: depthPercent,
            #screenName: screenName,
            #contentType: contentType,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackFileClassified({
    required String? classificationId,
    required String? category,
    required double? confidenceScore,
    required int? processingDuration,
    required String? modelVersion,
    String? method,
    bool? resultAccuracy,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackFileClassified,
          [],
          {
            #classificationId: classificationId,
            #category: category,
            #confidenceScore: confidenceScore,
            #processingDuration: processingDuration,
            #modelVersion: modelVersion,
            #method: method,
            #resultAccuracy: resultAccuracy,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackClassificationRetried({
    required String? classificationId,
    required double? originalConfidence,
    required String? retryReason,
    required int? attemptNumber,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackClassificationRetried,
          [],
          {
            #classificationId: classificationId,
            #originalConfidence: originalConfidence,
            #retryReason: retryReason,
            #attemptNumber: attemptNumber,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackSlowResource({
    required String? operationName,
    required int? durationMs,
    required String? resourceType,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackSlowResource,
          [],
          {
            #operationName: operationName,
            #durationMs: durationMs,
            #resourceType: resourceType,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackApiError({
    required String? endpoint,
    required int? statusCode,
    required int? latencyMs,
    int? retryCount,
    String? errorMessage,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackApiError,
          [],
          {
            #endpoint: endpoint,
            #statusCode: statusCode,
            #latencyMs: latencyMs,
            #retryCount: retryCount,
            #errorMessage: errorMessage,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackClientError({
    required String? errorMessage,
    required String? screenName,
    String? stackTrace,
    String? userAction,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackClientError,
          [],
          {
            #errorMessage: errorMessage,
            #screenName: screenName,
            #stackTrace: stackTrace,
            #userAction: userAction,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackPointsEarned({
    required int? pointsAmount,
    required String? sourceAction,
    required int? totalPoints,
    String? category,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackPointsEarned,
          [],
          {
            #pointsAmount: pointsAmount,
            #sourceAction: sourceAction,
            #totalPoints: totalPoints,
            #category: category,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackContentViewed({
    required String? contentId,
    required String? contentType,
    String? source,
    int? userLevel,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackContentViewed,
          [],
          {
            #contentId: contentId,
            #contentType: contentType,
            #source: source,
            #userLevel: userLevel,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> trackContentCompleted({
    required String? contentId,
    required int? timeSpentMs,
    double? completionRate,
    int? quizScore,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackContentCompleted,
          [],
          {
            #contentId: contentId,
            #timeSpentMs: timeSpentMs,
            #completionRate: completionRate,
            #quizScore: quizScore,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> getUserAnalytics(
    String? userId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserAnalytics,
          [
            userId,
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> getSystemAnalytics(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSystemAnalytics,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getPopularContent(int? limit) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularContent,
          [limit],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  void trackButtonClick(
    String? buttonName, {
    String? screenName,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackButtonClick,
          [buttonName],
          {#screenName: screenName},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackScreenSwipe(
    String? direction, {
    String? screenName,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackScreenSwipe,
          [direction],
          {#screenName: screenName},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackSearch(
    String? query, {
    int? resultCount,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackSearch,
          [query],
          {#resultCount: resultCount},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackClassificationStarted({String? method}) => super.noSuchMethod(
        Invocation.method(
          #trackClassificationStarted,
          [],
          {#method: method},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackClassificationShared(
    String? classificationId, {
    String? familyId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackClassificationShared,
          [classificationId],
          {#familyId: familyId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackFamilyCreated(
    String? familyId, {
    int? memberCount,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackFamilyCreated,
          [familyId],
          {#memberCount: memberCount},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackFamilyJoined(
    String? familyId, {
    String? invitationId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackFamilyJoined,
          [familyId],
          {#invitationId: invitationId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trackReactionAdded(
    String? classificationId,
    String? reactionType, {
    String? familyId,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trackReactionAdded,
          [
            classificationId,
            reactionType,
          ],
          {#familyId: familyId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
