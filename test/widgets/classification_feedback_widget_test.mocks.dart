// Mocks generated by Mockito 5.4.4 from annotations
// in waste_segregation_app/test/widgets/classification_feedback_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i7;
import 'dart:typed_data' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:waste_segregation_app/models/waste_classification.dart' as _i3;
import 'package:waste_segregation_app/services/ai_service.dart' as _i4;
import 'package:waste_segregation_app/services/cache_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClassificationCacheService_0 extends _i1.SmartFake
    implements _i2.ClassificationCacheService {
  _FakeClassificationCacheService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWasteClassification_1 extends _i1.SmartFake
    implements _i3.WasteClassification {
  _FakeWasteClassification_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAiService extends _i1.Mock implements _i4.AiService {
  MockAiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get openAiBaseUrl => (super.noSuchMethod(
        Invocation.getter(#openAiBaseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#openAiBaseUrl),
        ),
      ) as String);

  @override
  String get openAiApiKey => (super.noSuchMethod(
        Invocation.getter(#openAiApiKey),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#openAiApiKey),
        ),
      ) as String);

  @override
  String get geminiBaseUrl => (super.noSuchMethod(
        Invocation.getter(#geminiBaseUrl),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#geminiBaseUrl),
        ),
      ) as String);

  @override
  String get geminiApiKey => (super.noSuchMethod(
        Invocation.getter(#geminiApiKey),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#geminiApiKey),
        ),
      ) as String);

  @override
  _i2.ClassificationCacheService get cacheService => (super.noSuchMethod(
        Invocation.getter(#cacheService),
        returnValue: _FakeClassificationCacheService_0(
          this,
          Invocation.getter(#cacheService),
        ),
      ) as _i2.ClassificationCacheService);

  @override
  bool get cachingEnabled => (super.noSuchMethod(
        Invocation.getter(#cachingEnabled),
        returnValue: false,
      ) as bool);

  @override
  String get defaultRegion => (super.noSuchMethod(
        Invocation.getter(#defaultRegion),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#defaultRegion),
        ),
      ) as String);

  @override
  String get defaultLanguage => (super.noSuchMethod(
        Invocation.getter(#defaultLanguage),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#defaultLanguage),
        ),
      ) as String);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.WasteClassification> analyzeImage(
    _i7.File? imageFile, {
    int? retryCount = 0,
    int? maxRetries = 3,
    String? region,
    String? instructionsLang,
    String? classificationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImage,
          [imageFile],
          {
            #retryCount: retryCount,
            #maxRetries: maxRetries,
            #region: region,
            #instructionsLang: instructionsLang,
            #classificationId: classificationId,
          },
        ),
        returnValue: _i6.Future<_i3.WasteClassification>.value(
            _FakeWasteClassification_1(
          this,
          Invocation.method(
            #analyzeImage,
            [imageFile],
            {
              #retryCount: retryCount,
              #maxRetries: maxRetries,
              #region: region,
              #instructionsLang: instructionsLang,
              #classificationId: classificationId,
            },
          ),
        )),
      ) as _i6.Future<_i3.WasteClassification>);

  @override
  _i6.Future<_i3.WasteClassification> analyzeWebImage(
    _i8.Uint8List? imageBytes,
    String? imageName, {
    int? retryCount = 0,
    int? maxRetries = 3,
    String? region,
    String? instructionsLang,
    String? classificationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeWebImage,
          [
            imageBytes,
            imageName,
          ],
          {
            #retryCount: retryCount,
            #maxRetries: maxRetries,
            #region: region,
            #instructionsLang: instructionsLang,
            #classificationId: classificationId,
          },
        ),
        returnValue: _i6.Future<_i3.WasteClassification>.value(
            _FakeWasteClassification_1(
          this,
          Invocation.method(
            #analyzeWebImage,
            [
              imageBytes,
              imageName,
            ],
            {
              #retryCount: retryCount,
              #maxRetries: maxRetries,
              #region: region,
              #instructionsLang: instructionsLang,
              #classificationId: classificationId,
            },
          ),
        )),
      ) as _i6.Future<_i3.WasteClassification>);

  @override
  _i6.Future<_i3.WasteClassification> analyzeImageSegments(
    _i7.File? imageFile,
    List<Map<String, dynamic>>? segments, {
    String? region,
    String? instructionsLang,
    String? classificationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImageSegments,
          [
            imageFile,
            segments,
          ],
          {
            #region: region,
            #instructionsLang: instructionsLang,
            #classificationId: classificationId,
          },
        ),
        returnValue: _i6.Future<_i3.WasteClassification>.value(
            _FakeWasteClassification_1(
          this,
          Invocation.method(
            #analyzeImageSegments,
            [
              imageFile,
              segments,
            ],
            {
              #region: region,
              #instructionsLang: instructionsLang,
              #classificationId: classificationId,
            },
          ),
        )),
      ) as _i6.Future<_i3.WasteClassification>);

  @override
  _i6.Future<_i3.WasteClassification> analyzeImageSegmentsWeb(
    _i8.Uint8List? imageBytes,
    String? imageName,
    List<Map<String, dynamic>>? segments, {
    String? region,
    String? instructionsLang,
    String? classificationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeImageSegmentsWeb,
          [
            imageBytes,
            imageName,
            segments,
          ],
          {
            #region: region,
            #instructionsLang: instructionsLang,
            #classificationId: classificationId,
          },
        ),
        returnValue: _i6.Future<_i3.WasteClassification>.value(
            _FakeWasteClassification_1(
          this,
          Invocation.method(
            #analyzeImageSegmentsWeb,
            [
              imageBytes,
              imageName,
              segments,
            ],
            {
              #region: region,
              #instructionsLang: instructionsLang,
              #classificationId: classificationId,
            },
          ),
        )),
      ) as _i6.Future<_i3.WasteClassification>);

  @override
  _i6.Future<_i3.WasteClassification> handleUserCorrection(
    _i3.WasteClassification? originalClassification,
    String? userCorrection,
    String? userReason, {
    String? model,
    List<String>? reanalysisModelsTried,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleUserCorrection,
          [
            originalClassification,
            userCorrection,
            userReason,
          ],
          {
            #model: model,
            #reanalysisModelsTried: reanalysisModelsTried,
          },
        ),
        returnValue: _i6.Future<_i3.WasteClassification>.value(
            _FakeWasteClassification_1(
          this,
          Invocation.method(
            #handleUserCorrection,
            [
              originalClassification,
              userCorrection,
              userReason,
            ],
            {
              #model: model,
              #reanalysisModelsTried: reanalysisModelsTried,
            },
          ),
        )),
      ) as _i6.Future<_i3.WasteClassification>);

  @override
  _i6.Future<List<Map<String, dynamic>>> segmentImage(dynamic imageSource) =>
      (super.noSuchMethod(
        Invocation.method(
          #segmentImage,
          [imageSource],
        ),
        returnValue: _i6.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i6.Future<List<Map<String, dynamic>>>);
}
